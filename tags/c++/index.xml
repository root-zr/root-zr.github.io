<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Albert Wang</title>
    <link>https://root-zr.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Albert Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Dec 2021 01:53:34 +0800</lastBuildDate><atom:link href="https://root-zr.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>the Map Container of C&#43;&#43; STL | c&#43;&#43; STL中的map容器</title>
      <link>https://root-zr.github.io/en/2021/12/23/the-map-container-of-c-stl-c-stl%E4%B8%AD%E7%9A%84map%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Thu, 23 Dec 2021 01:53:34 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2021/12/23/the-map-container-of-c-stl-c-stl%E4%B8%AD%E7%9A%84map%E5%AE%B9%E5%99%A8/</guid>
      <description>c++的map容器有4种，它们都保存了键值对类型的元素。map容器的元素是pair&amp;lt;const K,T&amp;gt;类型的对象，以K为键，T为值。pair实际上可以看作一个内部有两个元素的结构体，且这两个元素的类型是可以指定的[1] 。
struct pair { typeName1 first; typeName2 second; }; 同时我们注意到pair元素中的键是const指针来修饰的，这表明我们不能去修改它，因为如果修改的话会扰乱容器中元素的顺序。下面我们来具体了解一下这四种容器的具体实现。
1. map&amp;lt;K,T&amp;gt; 这个容器中的元素是有序的，通过less对象按照键来对所有元素排序。map&amp;lt;K,T&amp;gt;中不允许有重复的键。对于每一个pair&amp;lt;const K,T&amp;gt;节点，map&amp;lt;K,T&amp;gt;中一般是以平衡二叉树的形式来存储的，这样可以保证检索一个随机元素所需的时间是 。
1.1 创建容器 创建一个map容器的方法如下：
map&amp;lt;string, int&amp;gt; people; map&amp;lt;string, int&amp;gt; people{ {&amp;#34;Alice&amp;#34;,20},{&amp;#34;Bob&amp;#34;,25} }; map&amp;lt;string, int&amp;gt; people{ pair&amp;lt;string, int&amp;gt;(&amp;#34;Alice&amp;#34;,20), pair&amp;lt;string, int&amp;gt;(&amp;#34;Bob&amp;#34;,25) }; 可以先创建对象，后续再往里面加元素，也可以在初始化的时候添加一些元素。
1.2 插入元素 具体添加元素的api是insert函数，插入的元素类型可以有以下几种，第一种很容易理解，因为map里存放的就是pair类型的对象，第二种在保证类型正确的情况下也能保证正确插入，第三种方式则是根据map的value_type方式来插入。
people.insert(pair&amp;lt;string, int&amp;gt;(&amp;#34;Tom&amp;#34;, 20)); people.insert({ &amp;#34;John&amp;#34;, 21 }); people.insert(map&amp;lt;string, int&amp;gt;::value_type(&amp;#34;Li Hua&amp;#34;, 22)); 除了上面的三种方式以外还可以用类似于数组的方式来插入元素，下表事key，值对应着value。
people[&amp;#34;Tom&amp;#34;] = 20; people[&amp;#34;John&amp;#34;] = 21; people[&amp;#34;Li Hua&amp;#34;] = 22; 1.3 删除元素 删除元素可以用erase函数来实现，首先传入的参数可以是key的值，代码如下所示：
string name = &amp;#34;John&amp;#34;; if (people.</description>
    </item>
    
  </channel>
</rss>
