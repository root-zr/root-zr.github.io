<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中文 on Albert Wang</title>
    <link>https://root-zr.github.io/tags/%E4%B8%AD%E6%96%87/</link>
    <description>Recent content in 中文 on Albert Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Apr 2022 13:39:37 +0800</lastBuildDate><atom:link href="https://root-zr.github.io/tags/%E4%B8%AD%E6%96%87/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Distributed System and MapReduce | 分布式系统和MapReduce</title>
      <link>https://root-zr.github.io/en/2022/04/20/distributed-system-and-mapreduce-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%92%8Cmapreduce/</link>
      <pubDate>Wed, 20 Apr 2022 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2022/04/20/distributed-system-and-mapreduce-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%92%8Cmapreduce/</guid>
      <description>这篇博客主要是学习MIT的公开课6.824分布式系统 的学习笔记，在课程一开始老师主要介绍了分布式系统的和MapReduce的基本概念，后续有关于实现一个具体的MapReduce的实验。
分布式系统的基本概念 首先当用户要访问信息的时候，一般需要一个WEB的网页接口去和后台的数据库操作。当用户量很大的时候一台机器就不足以支撑这么大的并发量了，同时数据库所在的服务器也有可能会出现问题。所以很自然的想法就是用多台机器来分担压力。如果足够理想，两台机器就可以把压力减小一般，一直这样下去……不过可惜的是现实中这是不可能的。
现在想法是有了，但是怎样去实现它呢？我们知道一台机器是不容易出现问题的，一台电脑是可以陪伴我们很多年的。但是在一个具有成千上万台机器的分布式集群中出现问题确实非常常见的事，所以人们只能尽可能保证容错，而容错机制主要包括下面三个特性：
 可用性（Availability）：我们要能用这个系统，但是它又时常会出问题，那我们只能定期去把数据备份起来了，所以备份可以保证这个系统是可用的； 可恢复性（Recoverability)：我们已经备份了数据，那就要保证在出问题的时候能恢复到出错前的状态。这里可用的一些操作就是更新日志，设置一些检查点，使用非易失性的存储介质（如硬盘），不能一不小心停电了然后什么都没了。 一致性（Consistency)：我们现在有了备份，那多个副本中的数据是不是能保证一致呢？比如在一个&amp;lt;key,value&amp;gt;的数据库中，张三要取1000元前，然后发送请求导致主数据库更新了数据，但是就在发送更新副本的时候网段了，这就导致了数据的不一致。  而且就备份来说，它应该距离主体非常远，如果两台机器共用一个电源然后断电了或者该地发生了不可预见的地震，后果都是难以承受的。另外分布式系统作为一个基础设施，它有三个很重要的组成，就是存储系统，通信系统和计算系统。
MapReduce MapReduce是谷歌大数据三驾马车中的其中一篇论文，它被提出的目的是用来解决海量网页数据索引和排序之类的问题。它包含Map和Reduce两个过程，以WordCount为例，它的计算过程如下图所示：
当我们面临着一个大文件的时候，谷歌的文件系统GFS(Google File System)会把它差分成多个64kb的块，用来做任务分配的master服务器知道它们具体在哪台机器上，然后……
to be continue.</description>
    </item>
    
    <item>
      <title>Source Code Analysis of qsort Function in C Language| C语言qsort源码分析</title>
      <link>https://root-zr.github.io/en/2022/04/10/source-code-analysis-of-qsort-function-in-c-language-c%E8%AF%AD%E8%A8%80qsort%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 10 Apr 2022 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2022/04/10/source-code-analysis-of-qsort-function-in-c-language-c%E8%AF%AD%E8%A8%80qsort%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>在阅读这篇博客之前请确保您已经理解了快速排序的思想。
qsort函数位于GLIBC的stdlib目录下，内部实现了快速排序的功能，我们先不去管这个函数内部具体是怎么实现的，先来考虑如果我们要调用它，该怎么去调用呢。很显然，我们需要给它传入一个待排序的数组array，由于C语言会将数组参数转为指针，所以很自然地要传入一个数组长度的值，一般表示数组长度就是arraySize。看起来没什么问题，那我们来看一下它对外封装的接口是不是如我们所想呢。
看来我们的考虑还是欠佳，封装的接口有四个参数，除了传入的数组以外还要传入数组个数，每个元素的大小和一个比较函数。比较函数还是很容易理解的，因为我们毕竟不能保证始终要求它给我们升序排列，也不能保证随便什么内容都要求程序可以不出错的给我们排好序。但是为什么传入数组大小的时候必须要分开传参呢，我们自己写函数的时候也是只传了一个参数表示数组长度的呀。在分析原因之前我们先按照提供的接口简单测试一个例子吧。
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; int Cmp(const void * a, const void * b) { return ( *(int*)a - *(int*)b ); } int main() { int n; int values[] = { 2, 5, 4, 1, 3 }; printf(&amp;#34;排序之前的列表：\n&amp;#34;); for( n = 0 ; n &amp;lt; 5; n++ ) { printf(&amp;#34;%d &amp;#34;, values[n]); } qsort(values, 5, sizeof(int), Cmp); printf(&amp;#34;\n排序之后的列表：\n&amp;#34;); for( n = 0 ; n &amp;lt; 5; n++ ) { printf(&amp;#34;%d &amp;#34;, values[n]); } return(0); } 排序的结果如下图，</description>
    </item>
    
    <item>
      <title>Some Reviews About Movie The Great Learning | 纪录片电影《大学》观后感</title>
      <link>https://root-zr.github.io/en/2022/04/08/some-reviews-about-movie-the-great-learning-%E7%BA%AA%E5%BD%95%E7%89%87%E7%94%B5%E5%BD%B1%E5%A4%A7%E5%AD%A6%E8%A7%82%E5%90%8E%E6%84%9F/</link>
      <pubDate>Fri, 08 Apr 2022 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2022/04/08/some-reviews-about-movie-the-great-learning-%E7%BA%AA%E5%BD%95%E7%89%87%E7%94%B5%E5%BD%B1%E5%A4%A7%E5%AD%A6%E8%A7%82%E5%90%8E%E6%84%9F/</guid>
      <description>《大学》是清华大学出版社有限公司出品的，由孙虹、王静、柯永权三位导演的纪录片类型的电影。它讲述了四位在清华读书或者工作的人在不同的人生阶段，在不同的人生境遇所做出的选择。看完之后还是有很多的感触。
首先介绍的是一位上海的考生，他最终成功去了清华读书。但是在这个过程中也是有一些起伏，从一开始看感觉这位同学基本是可以很有把握地走进清华，但是高考却给他带来了一点小小的刺激，让他的道路不显得那么一帆风顺。在看的过程中我最有感触的地方是他在等待高考成绩出，以及出成绩之后的那一瞬间的心态，因为我的能力和这位同学差了很远，所以主人公其他的事迹我也很难有共鸣。我是以过来人的心态看的这一片段，现在看起来觉得心态相对平和，可是代入进自己高考的那段时间我却有着比主人公更加激动的情绪。寒窗苦读十多年，更多时候学生自己，家长之间，老师之间都希望可以通过高考成绩来给这个人定性。这种心情我非常能理解，因为毕竟这是一场非常公平的测试。如果让学生或者家长之间不去竞争成绩，难免大家会去找一些新的领域去竞争和攀比，这样导致的效果可能会更差。可是当所有人都把注意力放在这里的时候，难免会产生过大的压力，也会使一些同学的心态出现问题。
直观的一个表现就是人们会去渴望给学校划分三六九等，借此来巩固自己在高考时为自己争取到的“地位”，如果仅仅是如此倒也没有什么，但怕就怕这些同学可能会躺在历史的功劳簿上，放弃在大学时继续努力，这只会白白浪费大学黄金的学习时间；给大学评级导致的另外一个问题可能是，如果真的有人对此信以为真，那就会出现愿意为了去到所谓“等级更高一点”的学校而放弃自己更加心爱的专业的额情况，这对考生个人的人生有时也会带来很大的影响。
后面还介绍了一位水利水电工程系的博士生毕业之后放弃可能的留校机会去基层服务人民的事迹。这里最触动我的地方在于他所说的一段话，大致意思是说当外界直到他的决定之后对他的评价可能不是鼓励，甚至不是保持中立，而是一些谩骂和嘲讽，他们认为主人公这么做主要是想凭借他的身份给自己带来一些利益。
最后主人公说，如果是骂一个不好的人，人家也不在乎你去骂他。但是对于一个本来有点理想的人，要是去诋毁他，嘲笑他，他本来可能做这些事就只是想得到大家的一点认可，却被不断diss，这可能会给当事人带来一定的创伤。我相信很多人也曾经想过用自己的所学去造福一方百姓这样美好的愿景。只不过随着岁月的流逝，他们渐渐觉得这个想法不够真实，甚至很难将它说出口。所以当这样的例子发生在现实中的时候，大家会带着很复杂的心情去评论，这样也就出现了一些不好的评论。
相信随着我们时代的发展，越来越多的人会投身于此，这件事终有一天是人们都想去做，也都想做好的事。后续查了一下发现主人公的基层服务之旅还是很有成效的，希望主人公能坚持下去，实现心中的理想。</description>
    </item>
    
    <item>
      <title>Spoken English TipsⅡ| 英语口语小技巧——弱读和吞音</title>
      <link>https://root-zr.github.io/en/2022/04/01/spoken-english-tips-%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%BC%B1%E8%AF%BB%E5%92%8C%E5%90%9E%E9%9F%B3/</link>
      <pubDate>Fri, 01 Apr 2022 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2022/04/01/spoken-english-tips-%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%BC%B1%E8%AF%BB%E5%92%8C%E5%90%9E%E9%9F%B3/</guid>
      <description>介词通常的读法 介词通常会采用和字典中不太一致的读法，主要是为了方便说。
 to -&amp;gt; /tə/ for -&amp;gt; /fər/ or -&amp;gt; /ər/ and -&amp;gt; /ɛnd/ at -&amp;gt; /ət/ of -&amp;gt; /əv/  例句：
 He&amp;rsquo;s applying to Standford to get an MBA. This is for you. Do you want this or that? Danny went out and got drunk.  /h/可以吞音 he, his, her, him, have, had, has等如果不是在强调这个词，/h/可以吞掉。
 I think he&amp;rsquo;s(kiz) really smart. Did you(jʊ) tell her(lər) what he did? I have a bunch of work to do.</description>
    </item>
    
    <item>
      <title>Spoken English TipsⅠ| 英语口语小技巧——连读</title>
      <link>https://root-zr.github.io/en/2022/03/31/spoken-english-tips-%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD%E5%B0%8F%E6%8A%80%E5%B7%A7%E8%BF%9E%E8%AF%BB/</link>
      <pubDate>Thu, 31 Mar 2022 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2022/03/31/spoken-english-tips-%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD%E5%B0%8F%E6%8A%80%E5%B7%A7%E8%BF%9E%E8%AF%BB/</guid>
      <description>辅辅连读 如果前一词的词尾和后一词的开头发音正好相同，则直接合并。
 bit tired full lunch more room start time this city  相同发音部位的音连读
 喉咙（They are gone) 牙齿后面（Had some) 嘴唇牙齿（Tough pill)  辅元连读 词尾的辅音连接到下一个词的开头音
 My name is Adam. Picking up on the American intonation is super important.  元元连读  第一个词是元音结尾的 第二个词是元音开头的 看第一个词的词尾音决定连读  如果以/I/或者/i/结尾，后面接/j/
 She ate my apples. He isn&amp;rsquo;t a good guy.  以/u/或者/ʊ/结尾，后面接/w/
 Go away. I need to do a lot today.  常用的同化 d + y -&amp;gt; /ʤ/</description>
    </item>
    
    <item>
      <title>A Method Convert Latex to Word| 一个将latex公式转换为word公式的小窍门</title>
      <link>https://root-zr.github.io/en/2022/03/23/a-method-convert-latex-to-word-%E4%B8%80%E4%B8%AA%E5%B0%86latex%E5%85%AC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E4%B8%BAword%E5%85%AC%E5%BC%8F%E7%9A%84%E5%B0%8F%E7%AA%8D%E9%97%A8/</link>
      <pubDate>Wed, 23 Mar 2022 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2022/03/23/a-method-convert-latex-to-word-%E4%B8%80%E4%B8%AA%E5%B0%86latex%E5%85%AC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E4%B8%BAword%E5%85%AC%E5%BC%8F%E7%9A%84%E5%B0%8F%E7%AA%8D%E9%97%A8/</guid>
      <description>今天在看IEEE网页上的论文的时候发现它的公式竟然可以被复制成多种格式.
欣喜至于便去了解了一下这种技巧。然后发现其实是因为它的网页中引入了MathJax.js脚本。
&amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;/xploreAssets/MathJax-274/MathJax.js?config=default&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 同样的道理，我们也可以按照这种方式来编写latex公式，然后通过浏览器解析之后再将它复制成word对应的代码文本。道理很简单，那么具体该怎么做呢？
首先我们就需要一个.html的文件了，因为是要浏览器来解析的。然后将脚本导入进来。可以看到整个页面中基本只引入了MathJax的脚本，不需要别的什么设置。然后把我们需要的公式用latex的方式写在里。
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;#34;&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;title&amp;gt;tex to word&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; \begin{equation*} q_{j}=W\cdot\vec{x}_{j:j+R-1}+\vec{b} \tag{1} \end{equation*} &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 然后通过浏览器打开，鼠标右键将其保存为MathML code，如下图所示：
然后在word中选择插入公式，将拷贝出来的文本以纯文本的形式粘贴到公式块中就完成了。如果要转换不同的公式只需要在上面的标签中不断添加公式就可以了。
不过还是可以看到一个小缺陷，我们在tex格式里是加了\tag{1}的，而且网页也能显示，但是粘贴到word里就没有了。所以只能用word的方式来插入，选择插入——&amp;gt;文档部件，选择域，如下图：
然后在公式编辑区域里输入#(数字)，按下回车就可以成功编号了。
参考资料：
https://tex.stackexchange.com/questions/25223/embed-latex-math-equations-into-microsoft-word</description>
    </item>
    
    <item>
      <title>My Internship Experience | 我的5个月实习心得</title>
      <link>https://root-zr.github.io/en/2022/03/19/my-internship-experience-%E6%88%91%E7%9A%845%E4%B8%AA%E6%9C%88%E5%AE%9E%E4%B9%A0%E5%BF%83%E5%BE%97/</link>
      <pubDate>Sat, 19 Mar 2022 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2022/03/19/my-internship-experience-%E6%88%91%E7%9A%845%E4%B8%AA%E6%9C%88%E5%AE%9E%E4%B9%A0%E5%BF%83%E5%BE%97/</guid>
      <description>2021年8月，我正式开始了我人生的第一次实习旅程。因为校企合作的关系，所以我和实习的公司应该属于被动的关系。不过也是由于这层关系，让我有了一个难忘的实习经历。
我是在大数据部门实习，主要参与的业务包括两个方面。一个是和数据直接相关，通过和数据的直接交互，保证数据的完整，有效。还有就是一些和公司业务相关的一些操作；另一部分是进行软件开发，因为前一部分已经有了可靠的数据，所以要基于这些数据进行软件开发和产品设计。
首先我的两个leader都是特别年轻，而且具有人格魅力的人。leader 1是我所在部门的大老板（后文简称老板），我主要是在做开发的时候在他的组。leader 2 是招我进部门的人（后文简称leader)，还记得当时面试的时候主要都是我在说话，导致我一度认为他不善言辞，后面我才知道我错了，还错的很离谱，而他也正好是我第一个组的leader，这也算是缘分吧。
我最开始就是做数据分析，这部分的时间并不长，只有一个多月，再加上刚进入公司需要申请各种权限，熟悉公司的环境和氛围，所以感觉并没有太多的心得。值得一提的是，我刚进入公司的时候由于新的环境，再加上工作语言不熟悉，导致我非常紧张，不太敢于和同事说话，幸运的是我进入公司的第一位引路人A同事特别好，让我能够慢慢放松，慢慢地融入大家。而且进入公司会有很多的环境要配置，有各种权限要申请，我个人真的是一团乱麻，他也帮了我很多，在同期实习的别的同学还困扰在各种问题中时我已经可以了解业务了。我想以后我在真正开始第一份工作的时候就不会像之前那么紧张了，这也算是一种进步吧。
由于公司实行敏捷开发，所以每天都有站立会议，这时就体现出leader特别强的语言组织能力和讲故事的能力，不管是什么样的任务，他都能将其叙述地特别具有逻辑性。比如，我现在要完成A这样的一个事情，之所以要做A，是因为有怎样怎样的好处，它和我们整个业务的关系是什么，处于什么样的位置。基于这样的一个背景，那我现在就需要做B,C,D等等一系列的工作，现在我们到了哪一步，需要有什么问题需要被解决……会以一种讲故事的方式展开，这是觉得特别具有魅力的一点。另外我觉得他是将公司的企业文化和价值观具象化的人，如果说公司培训那么多企业价值观的内容都是平面的，那他就是立体的。当他在你面前和你交谈的时候，他说的话中体现的逻辑性特别具有魅力。用老板的话说，leader是一个极具演讲天赋的人。
一开始都是要从学习和了解业务为主，可是当我发现我要了解的技术包括Hadoop, spark, Scala等等一系列的大数据组件，还有公司用来自动化流程的一些工具Jira, Jenkins等等，这么多新的内容放在面前，我确实像面对着一个刺猬，无处下爪。怀着带着任务学习的心态，我先从语言着手，然后再去理解语言下的工具，当会使用的时候就能开始做一点小事，当做事遇到问题的时候再去查阅资料就能理解比较底层的原理，当了解之后也觉得这些东西可能没有那么困难。在学校学习的时候，一般都是要从最核心的地方开始，一步步向上封装，这也是一种比较新的感悟。所以我觉得当面对一个新鲜的事物的时候，不要被这件事本身的庞大给吓跨，从离自己最近的那件小事开始学习，一点点去靠近，当翻越过的时候回头再看，可能会发现当时自己以为的山丘其实就是一个小土堆。
很快，一年一度的秋季校园招聘开始了，因为我的家庭条件不算好，自己有生存的压力，所以希望自己可能有一个薪酬相对高一点的工作，为此适当放弃自己的一点健康我感觉也能接受。这点和我实习的公司不是特别一致，所以我也加入了秋招的行列。这时有更多的问题暴露出来了，一个是因为我加入实习的时间是8月，这个时间是公司定的，我个人没法改变，所以到秋招其实也没有太长的时间；同样也因为时间短，所以可能并没有多少实际的，能够拿出手的项目可以和面试官说。我个人感觉数据分析是一个不太能够量化工作量的一个工作，有时候程序运行一遍要几个小时，有时候几个小时过去了可能还得不到想要的一个效果。而且当我思考了一点可以优化的内容，反应在代码上也就是几行，而且这个深思熟虑的结果表述出来的话在别人看来很可能就是显然的一个事情。
为此，我开始去做开发的工作，这样的话自己写了一行代码就有一行代码的效果。一开始确实是这样，感觉自己想做的和正在做的事情一致了，所以开始变得比较有干劲。我的第二位引路人B同事也很nice，他每次给我小的ticket的时候都是会给我官方的文档，然后再告知要达成的目标。这也养成了我阅读官方文档的习惯，我发现相比较于在英语阅读上花费的时间和在中文的真假信息之间做选择，前者甚至花费的时间更小。但是新的问题又随之出现了，因为我感觉自己的时间开始不够用了，虽然给我的任务并不重，但我一方面学的东西不多，再者各种技术也不够熟练，所以上班时间基本都要全力去工作。找工作的事情只能放在晚上，可是算法题有时候一道题就得做一个小时，还有一些面经要背，晚上并没有那么多的空闲时间给我。这时我的做法只能是坚持去做这件事，相信坚持下去能得到好的结果。幸运又再次降临，很快我就顺利地得到了让我满意的offer。或许这也是我的另一个经验，当你身处于多件事情交错的一个环境之下，此时只能在其中勉强维持，但是看不到出路的时候，不妨坚持一下，再坚持一下，幸福就在拐角处。
工作的问题目前已经不是困扰我的主要因素了，而我的实习经历也才开始了两个月左右，这时我想把自己重心完全放在工作上，想做出一点成绩。我的第三位引路人C同事也出现了，他把他的一些边缘任务分给我，然后慢慢深入，让我对整个项目要做的事情有一个了解。我的任务开始慢慢重了起来，而与此同时，我所犯的错误也开始多了起来。当时我要发布一个新的版本要到生产环境，可是因为换了新的部门，而我的信息还停留在之前的部门，所以发布就出现了延迟。老板催问进度，这时我应该及时告诉老板的，但是内向的性格有开始兴风作浪，想着这儿是管上百人的领导啊，他这么忙，我去打扰他好像不太合适。况且这个任务虽然是我在做，但毕竟我遇到问题，C同事会帮我，所以就沉默了。现在回想，这是做的特别不好的事情，既然我想锻炼自己，就应该把自己等同于一个正式的员工，即便我做的工作可能并不算核心，我也应该及时让老板知道。而且这也是老板一开始就希望我们做到的东西，他更愿意我们去了解真实的项目，即使我们在这个项目里做的东西是边缘的。换句话说，他希望我们知道自己做的一个任务即使再小，也能知道它在整个项目中发挥的作用，这种大局观的意识是我的又一个收获，我希望我能在后面的工作中能坚持去做这件事。
不管是我的老板还是leader，他们都是希望我能有一个大局观的视野，对业务有一个清晰的了解。可是我是更希望能够去了解一些技术的细节，所以这之间应该是存在者一点分歧。不过在我以后会做的项目中，我应该会愿意去花一些时间去培养对整个项目的大局观。
转眼就来到了12月，后续虽然也实习了一个多月，但是因为赶上国外的同事过圣诞，国内的同事也要休剩下的年假，所以基本没有过多的任务量，比较平淡地度过了最后这段时期。复盘我的整段实习经历，我对自己的表现其实不算是特别满意，主要是因为我感觉自己和领导，同事之间缺乏交流，对项目的了解也不算特别清晰，最主要的是我一直考虑的是这段实习能带给我什么，却没有考虑到我的到来可能会为部门带去什么，哪怕是为部门带去一种比较年轻的思想也行。
总而言之，这是我第一段工作的经历，它带给我很多的回忆，包括友善的同事，幽默又睿智的领导，公司开放的氛围等等，所以应当是我一段很美好的经历！</description>
    </item>
    
    <item>
      <title>Knapsack Problem | 背包问题</title>
      <link>https://root-zr.github.io/en/2022/02/24/knapsack-problem-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 24 Feb 2022 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2022/02/24/knapsack-problem-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>01背包问题 有N 件物品和一个容量为bag 的背包。第i 件物品的重量是w[i]，价值是v[i]。 求解将哪些物品装入背包可使价值总和最大。
暴力算法 我们首先想到的应该是穷举所有的可能，然后把最好的那一个给返回。而在穷举的过程种我们需要考虑的问题仅仅是对于第i个物品，到底要不要把它放入背包。所以可以用递归的方式很自然地解决。
/** * * @param w 物品的重量 * @param v 物品的价值 * @param i 第i个物品 * @param alreadyW 已经放入背包的重量 * @param bag 背包所能承受的最大重量 * @return 最大价值 */ public static int recur(int[] w,int[] v,int i,int alreadyW,int bag){ if(alreadyW &amp;gt; bag || i &amp;gt;= w.length) return 0; //背包超重或者没有物品可以装  int totalVal1 = 0,totalVal2 = 0; totalVal1 = recur(w,v,i+1,alreadyW,bag); //第i个物品不放入背包  if(alreadyW+ w[i] &amp;lt;= bag) totalVal2 = recur(w,v,i+1,alreadyW+ w[i],bag) + v[i]; //第i个物品放入背包  return Math.</description>
    </item>
    
    <item>
      <title>Why Do I Start to Write Blog| 为什么要开始写博客</title>
      <link>https://root-zr.github.io/en/2022/02/13/why-do-i-start-to-write-blog-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 13 Feb 2022 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2022/02/13/why-do-i-start-to-write-blog-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</guid>
      <description>我开始写博客应该是2020年的时候。那时正处于新冠疫情期间，由于只能在家里上课，学习的效率难免受到影响，再加上那时的课业压力有点大，所以我便开始尝试来写技术博客来记录自己遇到的一些问题和学习的心得。
最开始的时候都是把文章保存在本地磁盘，因为害怕自己写的东西可能会存在一些错误，从而误导读者，所以不敢发布到网络平台上。后面我开始逐渐说服了自己，因为即便是文章有错误被读者指正了，我也能够改正这个也许一直都不曾发现的问题。从另外一个角度来说，如果自己的一些经验可以帮到千里之外的某一个人的话那更是一件让人非常高兴的事。
于是我开始渐渐将自己写的博客发到自己的知乎上，看着每一篇文章都能被几百个人阅读感觉还是非常不错的。不过慢慢我也发现了知乎存在的一些问题。
首先它是一款带有社交性质的产品，所以我在平台的一言一行可能都想服从于我给自己设定的一些“人设”，有些真正的心里话反而不敢，也不愿意发出来；除此之外我发现虽然目前知乎的用户群体学历是最高的，但从宏观的角度看其实也跟“刚下飞机，年薪百万”差了很远，人们对于技术类的博客可能也并不是特别的关注；最后我发现人们问的问题往往都带着一个预期的答案，比如如果有人的问题是“我大三了绩点比较低还有机会保研吗”，可能他会希望看到类似于&amp;quot;no problem!&amp;ldquo;这种答案，真正去对这个问题分类讨论往往不会受到更多关注。
于是乎，我觉得自己可以搭建一个个人博客，这样的话我就能够完全将自己的所思所想发出来，这样就不用有太多顾率。说干就干，在网上大致了解了一下hugo的用法，然后花了大半天的时间完成了这个个人博客的搭建，虽然大部分的时间都花在了浏览不同的网站主题上面。
最后，非常感激和荣幸您能阅读我的博客！</description>
    </item>
    
  </channel>
</rss>
