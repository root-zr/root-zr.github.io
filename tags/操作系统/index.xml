<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>操作系统 on Albert Wang</title>
    <link>https://root-zr.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 操作系统 on Albert Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Oct 2022 13:39:37 +0800</lastBuildDate><atom:link href="https://root-zr.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Memory Allocation of Linux 0.11 | Linux 0.11 内存区域划分</title>
      <link>https://root-zr.github.io/en/2022/10/06/memory-allocation-of-linux-0.11-linux-0.11-%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86/</link>
      <pubDate>Thu, 06 Oct 2022 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2022/10/06/memory-allocation-of-linux-0.11-linux-0.11-%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86/</guid>
      <description>内存区域划分 Linux 0.11 内核默认最多支持 16M 物理内存。它的内核模块在物理内存的最前端。然后是高速缓冲区，告诉缓冲区是磁盘等块设备临时存放数据的地方，告诉缓冲区的最高内存地址可以是 4M，下图中告诉缓冲区还要扣除显存和 BIOS ROM 占用的部分。剩余部分才是主内存区，如果系统中还有 RAM 虚拟磁盘，主内存区的前段还要扣除虚拟盘所占的内存空间。如下图所示，
我们来看一下具体在代码中的实现， 下面代码中 ROOT_DEV 表示根设备号， buffer_memory_end 表示高速缓冲区的末端地址， memory_end 表示机器的内存数，main_memory_start 则表示主存的开始地址。
ROOT_DEV = ORIG_ROOT_DEV; // 0x901fc drive_info = DRIVE_INFO; // 0x90080 memory_end = (1&amp;lt;&amp;lt;20) + (EXT_MEM_K&amp;lt;&amp;lt;10); memory_end &amp;amp;= 0xfffff000; if (memory_end &amp;gt; 16*1024*1024) memory_end = 16*1024*1024; if (memory_end &amp;gt; 12*1024*1024) buffer_memory_end = 4*1024*1024; else if (memory_end &amp;gt; 6*1024*1024) buffer_memory_end = 2*1024*1024; else buffer_memory_end = 1*1024*1024; main_memory_start = buffer_memory_end; #ifdef RAMDISK 	main_memory_start += rd_init(main_memory_start, RAMDISK*1024); #endif 	mem_init(main_memory_start,memory_end); 上面的代码首先初始化了根设备号和硬盘参数表，然后设置内存的大小为 1M + 扩展内存 * 1024 字节，memory_end &amp;amp;= 0xfffff000; 则是表示忽略不到 4K 的内存数。</description>
    </item>
    
    <item>
      <title>Run Linux with Bochs | Bochs运行Linux操作系统</title>
      <link>https://root-zr.github.io/en/2022/10/04/run-linux-with-bochs-bochs%E8%BF%90%E8%A1%8Clinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 04 Oct 2022 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2022/10/04/run-linux-with-bochs-bochs%E8%BF%90%E8%A1%8Clinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description>操作系统是一个神奇的软件，它管理了各种硬件，所以它本身足够复杂。同样也是这个原因导致我们要对操作系统的代码进行调试变得非常困难。
本文是一篇介绍怎样用 Bochs 来运行和调试 Linux 0.11 的博客。选择 Bochs 而不是 VM Ware 的原因是 Bochs 仿真了 X86 的硬件环境和外设，而VM Ware 则是仿真了一些 I/O 功能，其他是依靠 X86实时硬件执行的。这样虽然 Bochs 在速度上不如 VM Ware，但是因为它具备更加精确的状态和时序，所以更适合开发底层系统软件。 Linux 选择 0.11 的原因则是当前的 Linux 版本太过于庞大，基本不可能完全阅读完它的代码。相比之前 0.11 版本的代码总共也就几万行，而且是一个相对完整的操作系统，所以用它是比较适合的。
Bochs安装和运行Linux 我们之前认为 Bochs 更适合操作系统，幸运的是大家都是这么想的，所以我们已经有完善的软件包可以帮助我们完成这一步了。点击这里 可以下载Linux 0.11 的软件包，解压缩之后可以看到下面的内容。
上图中第一个.exe的文件就是Windows 下 Bochs 的安装文件，.rpm 是 Linux 下的安装文件。本文以 Windows 下为例，双击按照常规安装应用软件的方式安装即可。
上图中 .bxrc 文件是 Bochs 的配置文件，它们的参数各不相同。这里简单介绍一下 bochsrc-hd.bxrc。这个配置文件从启动软盘（A盘）加载内核映像文件 booting-0.11-hd，使用硬盘映像文件 hdc-0.11-new.img 第一个分区中的跟文件系统。
在安装完 Bochs 后直接点击 bochsrc-hd.bxrc 就能进入模拟环境，如下图所示。我们看到当前目录下有 hello 的可执行文件，我们可以直接运行它，会在控制台打印出 hello world！
Linux 代码调试 调试代码要用到的是 Bochs 的 debug 功能，类似于 GDB。首先我们要修改 debug.</description>
    </item>
    
  </channel>
</rss>
