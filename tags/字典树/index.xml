<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>字典树 on Albert Wang</title>
    <link>https://root-zr.github.io/tags/%E5%AD%97%E5%85%B8%E6%A0%91/</link>
    <description>Recent content in 字典树 on Albert Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Feb 2023 13:39:37 +0800</lastBuildDate><atom:link href="https://root-zr.github.io/tags/%E5%AD%97%E5%85%B8%E6%A0%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Trie Tree | 字典树</title>
      <link>https://root-zr.github.io/en/2023/02/19/trie-tree-%E5%AD%97%E5%85%B8%E6%A0%91/</link>
      <pubDate>Sun, 19 Feb 2023 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2023/02/19/trie-tree-%E5%AD%97%E5%85%B8%E6%A0%91/</guid>
      <description>背景 假如我们现在有一个单词组成的数组[&amp;ldquo;apple&amp;rdquo;, &amp;ldquo;banana&amp;rdquo;, &amp;ldquo;orange&amp;rdquo;, &amp;hellip;]，我们希望准确地知道某一个单词是否在这个数组里，有什么高效的统计方式呢？
字典树 字典树的设计就是用来解决上面的问题，下图就是一个字典树的示意图，它具有以下的特点：
 它的每条边代表了一个特定的字符； 从根节点到每个节点的路径就是某个字符串的前缀； 一个父结点的子结点数目最多有 26 个，因为只有 26 个单词.  对于下面这张图来说，我们希望知道 &amp;ldquo;cat&amp;rdquo; 在不在字典里，首先我们从根节点出发，先找第一个单词 &amp;lsquo;c&amp;rsquo; 在不在根节点的子结点里；如果在，就找第二个单词 &amp;lsquo;a&amp;rsquo; 在不在 &amp;lsquo;c&amp;rsquo; 的子结点里，这样不断地查找下去。
我们不难发现，对于这棵树来说，它的深度取决于当前字典里最长单词的字母个数，而单词的长度一般不会超过 50，所以这棵树的查找是非常高效的。
字典树除了能很好地判断一个单词是否在这个字典里，它同样可以应用于自动补全和拼写检查。
代码实现 要实现这棵树也非常简单，首先我们需要把这棵树的节点构造出来，这里用一个长度为 26 的数组用来表示某一个字母是否有对应的子结点，还有一个 int 的变量用来表示在这颗树里有多少个单词以当前这个节点结尾。
class Node { Node[] next; int end; public Node() { next = new Node[26]; } } 然后我们需要实现 Trie 的代码，我们只需要通过迭代的方式去插入和查询即可。
public class Trie { Node root; public Trie() { root = new Node(); } public void insert(String word) { char[] arr = word.</description>
    </item>
    
  </channel>
</rss>
