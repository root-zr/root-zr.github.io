<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并查集 on Albert Wang</title>
    <link>https://root-zr.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
    <description>Recent content in 并查集 on Albert Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Dec 2022 13:39:37 +0800</lastBuildDate><atom:link href="https://root-zr.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Union-Find Disjoint Sets | 并查集</title>
      <link>https://root-zr.github.io/en/2022/12/10/union-find-disjoint-sets-%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Sat, 10 Dec 2022 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2022/12/10/union-find-disjoint-sets-%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>算法介绍 并查集主要用于集合之间的操作。对于两个集合而言，它们一般能做的就是将两个集合的元素合并（并）。同时，我们往往会希望知道两个元素在不在同一个集合中（查）。由此便引出了并查集这种数据结构。
为了便于理解，我们先将问题进行简化。假如目前摆在我们面前的有这样一个图
在这个图中 每两个节点之间的连通关系和它们之间的距离可以用如下的二维数组来表示，
[[1,2,9],[2,3,6],[2,4,5],[1,4,7]] 我们现在希望找到一种数据结构，从我们给定的联通关系中从 0 构建上面的那张图，并且可以高效地实现查找某一个节点在不在这张连通图里面。所以我们可以将它们用一个一维数组的方式来存储，如下图所示
我们将数组的下标用来表示元素节点，用数组下标对应的值来表示它们的父亲节点，这样就可以构建一个father数组。我们在初始化的时候可以将它们的父亲节点都初始化成自己，这时对应的图就是每个节点各自都不连通，然后我们在用并查集的并来对这个数组进行赋值（这时我们不妨先假设father数组已经构建好了）。
public int findFather(int n) { if (fa[n] == n) { return n; } return findFather(fa[n]); } public void unionSet(int i, int j) { int faI = findFather(i); int faJ = findFather(j); if (faI != faJ) { fa[faJ] = faI; } } 我们首先来观察 findFather 这个函数，这个函数做的事情就是找一个节点的根节点。如果一个节点的父结点就是它自己的话说明我们已经找到这棵树的根了，然后就返回这个节点的 id。否则，我们就找这个节点父结点的父结点，也就是它的“爷爷节点”，逐层向上递归，最终我们一定能找到这个节点所在集合的根节点，并且保证时间复杂度是线性的。
然后我们再来观察 unionSet 这个函数，这个函数首先会去找两个元素i，j 的根节点，如果它们的根节点是一样的，说明它们在一个集合里，这里我们不进行操作。如果我们面对的是一个图的数据结构，参见下面实战演练，这时我们可以不去考虑它们是否已经在一个集合中，也就是说我们不需要保证我们最终合并的集合是一个树形的结构；否则，说明它们在不同的集合，这时我们要做的操作就是把这两个集合合并起来，我们只需要让其中一个根节点的父结点变成另一个节点就可以了。这样我们就完成了两个集合的合并操作。
到这里并查集的任务基本已经完成了，我们来思考一下有没有什么可以进一步优化的空间。手下来看 findFather 这个函数，我们显然可以知道它的时间复杂度是线性的。也就是说，如果我们的运气足够差，当我们目前构建的这个树退化成了单向链表，在时间上我们就要付出更大的成本了。所以可以考虑有一种优化的方式，因为我们在调用这个函数的时候只想知道根节点是谁，并不一定要记录每个节点的父结点，所以我们可以在初始化的时候将每个节点的父结点都设置为根节点，代码表示如下
public int findFather(int n) { if (fa[n] == n) { return n; } return fa[n] = findFather(fa[n]); } 这段代码需要说明的一点是 fa[n] = findFather(fa[n]) 这个表达式本身是有返回值的，返回值是 fa[n] 最终被赋予的那个值。</description>
    </item>
    
  </channel>
</rss>
