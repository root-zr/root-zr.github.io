<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>消息服务 on Albert Wang</title>
    <link>https://root-zr.github.io/tags/%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1/</link>
    <description>Recent content in 消息服务 on Albert Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Sep 2023 13:39:39 +0800</lastBuildDate><atom:link href="https://root-zr.github.io/tags/%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Messaging Service 2 | 消息服务2 </title>
      <link>https://root-zr.github.io/en/2023/09/16/messaging-service-2-%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A12/</link>
      <pubDate>Sat, 16 Sep 2023 13:39:39 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2023/09/16/messaging-service-2-%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A12/</guid>
      <description>从上一篇博客中我们知道两台服务器之间的通信可以采用消息队列的方式。使用这种方式的好处在于生产者和消费者之间完全实现了异步通信，生产者只需要生产消息到消息队列，然后任意一个消费者都可能在往后的某个时间消费这个消息，但是消息只可以被一个消费者消费。这也就间接出现了一个生产者只会对应一个消费者的场景，实现了一种点对点的通信模式。
图1 上面的模式是一种很不错的设计方案，假如有一天负载突然增大，我们也可以通过不断增加生产者服务器和消费者服务器来应对。但是这种模式也存在一个问题，加入我们现在有一笔订单，生产者把订单加入消息队列，这时我们希望和订单相对应的多个消费者都做出相应的处理，只用点对点的模式就会比较麻烦，它也会限制我们后续业务的扩展。这时可以采用发布订阅的模式来处理，生产者依然发送消息到消息队列，消息队列会把消息发送给所有订阅了这个消息队列的消费者。我们在上一篇博客的例子中就采用 epoll 的方式来实现了订阅消息队列的这种方式。当所有的消费者都消费完了这条消息，这条消息才会从消息队列中被删除。
图2 下面我们来介绍一个消息服务很成熟的例子rocketmq ，在 Apache RocketMQ 里有一个主题（Topic）的定义，官方文档中称它是消息传输和存储的顶层容器，用于标识同一类业务逻辑的消息。
图3 同样还有一个消费者分组（ConsumerGroup）的概念也需要被提及，消费者组被定义为多个消费行为一致的消费者。下面我们举个例子来说明一下这个分组意义，假设下图中的两个组分别代表商品和顾客，当消息队列中有一笔订单过来的时候商品和顾客这两个组中的服务器应当各自只有一台会消费这个数据，但是这个商品和顾客这两个组都是订阅了这个消息的。也就是说通过这种机制来很好地结合了点对点通信和发布订阅模式的通信。
图4 下面就是 RocketMQ 的架构实例，我们至少需要两台消息服务器，一台是 NameServer，它用来管理所有的 BrokerServer，当生产者起来的时候它会首先通过 NameServer 获取到 BrokerServer 的信息，然后就会和 BrokerServer 之间发送信息，同样地，消费者也会采用这样的方式。从下图中我们很容易发现不管是 NameServer 还是 BrokerServer，他们都是可以被用作集群的，原因也很简单，假如 NameServer 宕机了，那整个消息服务就瘫痪了，所以会采用多个服务器备份的方式来搭建集群。
图5 值得一提的是在上面的图中没有画出来消费者订阅 BrokerServer 的信息不光可以从主服务器上订阅，也可以从被服务器上订阅，这样可以加大消费者处理的性能，当然满足这种订阅机制的前提是主备服务器之间的数据是保证具备了强一致性的。
我们从图 3 和图 4 中是可以看到一个 BrokerServer 里是有多个消息队列的，这样可以增加消息被并行消费的能力，因为假如只有一个队列的话就会存在互斥的信息，有些消费者组就需要等待。如果包拯一个消费者组有一个属于自己的消息队列，每个消费者都从自己订阅的队列里拿消息，这样会持续增加消息队列的性能。
最后我们总结一下消息服务器的作用：
 可以用来进行模块间解耦：模块之间只需要发消息，不需要去调用对方的API； 可以具备队列所具有的FIFO的特点； 可以做到“削峰填谷”，起到一个缓冲的作用。  参考资料：
 中国大学慕课JavaEE之Spring框架：https://www.icourse163.org/learn/XMU-1462056168 rocketmq官网：https://rocketmq.apache.org/  </description>
    </item>
    
    <item>
      <title>Messaging Service 1 | 消息服务1 </title>
      <link>https://root-zr.github.io/en/2023/09/16/messaging-service-1-%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A11/</link>
      <pubDate>Sat, 16 Sep 2023 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2023/09/16/messaging-service-1-%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A11/</guid>
      <description>一般来说两台服务器之间的通信都可以简单抽象成两个进程之间的通信，而进程之间的通信有管道，消息队列，共享内存等各种的通信方式。其中消息队列是一种非常方便于我们理解的方式，比如下面这个例子，我们可以首先创建一个消息队列，然后载创建两个线程 send_tid, receive_tid，它们两个线程分别承担了生产者和消费者的角色，前者发送消息到消息队列，后者从消息队列中获取消息。
我们的故事先从两个进程之间的通信说起。进程之间的通信有管道，消息队列，共享内存等各种通信方式，其中消息队列是一种非常方便于我们理解的方式。比如下面这个例子，我们可以首先创建一个消息队列，然后载创建两个线程 send_tid, receive_tid，它们两个线程分别承担了生产者和消费者的角色，前者发送消息到消息队列，后者从消息队列中获取消息。
在开始之前我们先定义下面的一些表示，包括消息的封装（分为消息类型和内容），消息队列的标识（用来唯一标识这个消息队列）和epoll描述符（我们生产者需要不断从消息队列中epoll出数据）。
struct message { long msg_type; char msg_text[256]; }; int msg_id; // 消息队列标识符 int epoll_fd; // epoll描述符 然后我们实现第一个线程用来发送消息到消息队列，在下面这个例子中每隔 2S 写一条消息到消息队列中，因为是 while (1)，所以这个线程永远不会退出。
void *send_thread(void *arg) { struct message msg; int msg_count = 1; while (1) { msg.msg_type = 1; // 构造消息内容 snprintf(msg.msg_text, sizeof(msg.msg_text), &amp;quot;Message %d from send_thread&amp;quot;, msg_count); // 发送消息到消息队列 if (msgsnd(msg_id, &amp;amp;msg, sizeof(msg), 0) == -1) { perror(&amp;quot;msgsnd&amp;quot;); exit(1); } printf(&amp;quot;Sent: %s\n&amp;quot;, msg.msg_text); msg_count++; sleep(2); } return NULL; } 接收消息的线程相比较于发送消息的线程稍微复杂了一点，因为这里用到了 epoll 的系统调用。当消息队列中有事件被监听到之后会通知消费者去处理消息。在这个例子中增加 epoll 的原因是在没有事件发生时，线程会自动进入睡眠状态，不会浪费资源。一旦有事件发生，线程将被唤醒来处理这些事件。这使得 epoll 成为处理大量并发连接的有效工具，因为它能够高效地管理和处理事件而不会占用大量线程资源。</description>
    </item>
    
  </channel>
</rss>
