<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>一周年 on Albert Wang</title>
    <link>https://root-zr.github.io/tags/%E4%B8%80%E5%91%A8%E5%B9%B4/</link>
    <description>Recent content in 一周年 on Albert Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Jul 2023 13:39:37 +0800</lastBuildDate><atom:link href="https://root-zr.github.io/tags/%E4%B8%80%E5%91%A8%E5%B9%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Work for One Year | 工作一周年记</title>
      <link>https://root-zr.github.io/en/2023/07/16/work-for-one-year-%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%91%A8%E5%B9%B4%E8%AE%B0/</link>
      <pubDate>Sun, 16 Jul 2023 13:39:37 +0800</pubDate>
      
      <guid>https://root-zr.github.io/en/2023/07/16/work-for-one-year-%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%91%A8%E5%B9%B4%E8%AE%B0/</guid>
      <description>上周刚发现自己工作已经一年了，这也意味着我把博客从知乎迁移过来也有一年多的时间了，刚好趁着这个机会稍微总结下我这段时间的经验和最近的感悟。
因为这段时间自己比平时忙了一点，我也比刚开始工作时懒了一点（或许是懒了很多），所以感觉自己有好久没有写过博客了。当我打开网址发现自己上一篇博客已经是在 2 个月前，确实离我一开始定下的一周一篇的目标差了很多！
博客 首先从博客上面的数据来看，迁移到 github 托管确实会比知乎的数据量难看很多，知乎上随便一篇博客都能有至少几千的阅读量，但是个人博客就显得寥寥无几，因为我中途换过一次域名，所以结合前后数据来看也就 400 人左右访问，访问次数在 1000 次左右。
当然这其中的原因也是多方面的，首先，我没有使用专门的后端管理页面，所以无法准确统计真实的访问数据。我曾考虑过购买一台性能较低的服务器，然后将科学上网和博客后台管理统一在这台服务器上，达到经济实惠的目标。但是考虑到如果网络被墙，我仍然需要迁移数据，而且获取真实数据对我来说并没有太大的意义。因此，我放弃了这个想法；
第二个原因是我之前使用GitHub托管的页面没有被百度爬虫收录，因此大部分人通过搜索引擎进入我的博客应该是通过Bing或Google等其他搜索引擎。为了改善这一点，我购买了一个域名，但是提交给百度收录的手续太繁琐了，所以我只能随缘了；
第三也是最重要的，知乎本身的流量根本不是个人博客所能比的，数据上存在差距也不足为奇。
从博客内容上来看，我写过的几篇博客主要还是集中在算法和分布式系统方面，我个人觉得算法的博客是很难写的，因为我理解算法和数学有相似的特点，如果语气过于口语化，表达的内容专业性就可能有问题。但是如果过于专业化，也没多少人有耐心去读。正如杨振宁先生评价数学类的书籍那样，“现代数学的书可以分成两种，一种是看了一页看不下去的，另一种是看了一行就看不下去的。” 因此，我在写算法类的博客时常常犹豫不决，而且现在回过头来看这些内容，发现写得确实不够生动。如果有时间的话，我觉得有必要进行一些修改。
学习 从这一年来看，学习上面确实收获很大。首先从编程上来看，我个人觉得自己最大的收获不是写出的代码 bug 减少了很多，这一点当然也做不到，而是我明白了应该怎么样去写代码。我在学校常用的编程语言都是面向对象的，而且写的项目都是 demo 级别，这会导致我接触到一些框架的时候很难理解到为什么需要分层，为什么需要抽象和封装，为什么一个文件里可以有上万行代码。工作中中项目代码正好可以弥补了我之前认知的缺陷，面对着几十年传承的代码，代码里的一些结构缺陷清晰可见，重构的难度也可以很明确的感知到，在加上如何对 C 语言用面向对象的思路来编写代码。这些都让我平时有了一些思考，所以我现在反而想要从头开始接触一个项目，感受一下从一开始就理解代码架构，然后一步步填充下去，这里也小小地许个愿望，希望以后能够有时间去完成它。
另外一个比较大的收获就是自己看了一些和硬件交互的代码，我依稀记得自己在最开始学习操作系统和大数据时直接把这种课程上成了文科类的课程，包括考试也是全靠背书，几乎没有怎么看过真正的代码实现，所以相对底层的代码在我这里一直都被蒙上了一层神秘的面纱。这一年花了些时间去阅读了一下大家认为的 “好”代码，也算是弥补了这方面的缺陷，也让我在听到大佬们评价这些代码时可以带着自己的理解，不至于人云亦云。
今年最受关注的事情之一就是ChatGPT的火爆。我还记得去年11月时，知乎上已经有很多大佬在讨论这个话题了。我注册了账号体验了一下，虽然觉得效果确实令人惊叹，但随后我发现其中的原理是建立在“海量优质数据”和“大力出奇迹”的基础上的。这让我失去了兴趣。然而，没想到今年的4.0版本引起了如此大的轰动，使得很多人开始思考他们未来的工作方式和内容，我也陷入了迷茫。这种困惑间接导致我不知道应该继续学习哪些知识。我一方面想继续深入系统领域的内容，另一方面又想跟踪深度学习的研究进展，生怕自己的观点落后于时代。我非常不希望有一天面对一个新概念时会发出类似&amp;quot;哇，好神奇的黑科技！&amp;ldquo;的感叹。可是当自己什么都想要的时候也恰恰是自己什么都得不到的时候，我现在的时间根本不足以支撑我继续这样子广泛地去学习。希望在明年这个时间，不管经济形式如何，我都能够想明白这个问题，不再对未来迷茫。
生活 生活方面来看波动应该是最小的，我记得在曼昆的经济学原理中应该有提到在这样的环境之下人们的消费决策应该是保守的，大家会减少消费，把自己的钱存在银行，而政府要做的事就是调低利率，刺激消费。可我一方面远离“房赌毒”，没有什么消费的需求，另一方面没有什么存款，根本就无视各种利率，真有种光脚不怕穿鞋的感觉。
自打毕业之后我就没用到过什么金融的专业知识，老实说我现在像什么BSM定价模型，什么资产负债率，市盈率市净率都忘了，作为一名金融学专业毕业的人确实很失败，这里也希望我有一天真能够有时间也有机会重新用到这些知识来管理我的财产吧。毕竟人还是要有梦想的，万一就实现了呢(=^_^=)。
之前看网上有不少的内容都在将工作之后可能会被催婚之类的，我有这方面的心理准备，但是没想到它来得竟然如此之快。按照长辈们常用的催婚技巧，无非是说当自己老了之后可以互相照顾，所以婚姻看起来是一种金融衍生品，两个人都具备某种权利，在老了之后可以选择是否行权，即得到对方照顾的权利，为之需要付出的代价是每年，每天，甚至每时每刻的酸甜苦辣。以我目前的工作状态和生活习惯来看，甚至都不需要继续量化这些指标就能得到当前我应该采取的最优选择。但是长辈们貌似有其他的建模手段，或者说他们的模型中某项指标的权重过于大了，导致模型的结果倾向于人们做出某一个选择，真希望我们的专家们有天可以有一个相对权威的模型，从而彻底解决当下年轻人的困扰。
最后一个生活方面令我比较难受的是我一直都希望可以学习好一门乐器，在我一开始 996 工作时间的设想中是可行的，可是现在看来现实中这个实现起来还是有难度。迫于生活的压力，这点也只能暂时搁置，我相信总有一天它是可以被我重新拿起来的。
总结 我最开始想着写这篇博客的时候主要是想着总结一下这段时间的感受和困惑，写的过程中发现很多东西越写越多，后面不得不省略掉一些内容，这样看起来我这个阶段的牢骚应该比去年这个时候要多一点。另一方面我发现我在写生活篇的时候还是可以比较自然地代入金融的某些知识，这倒是让我比较喜出望外的一点，毕竟我真的已经很久没有在现实中跟金融有任何的交集了。
到这篇博客的最后我想起了我是直接从学校拿到毕业证之后就直接来到了现在住的地方，那段时间一直都在循环播放两首歌，我也分享给看到这里的你，祝福我们大家都能不忘初心，越来越好~
张三的歌 词：张子石 曲：张子石
.aspect-ratio { position: relative; width: 100%; height: 0; padding-bottom: 75%; } .aspect-ratio iframe { position: absolute; width: 100%; height: 100%; left: 0; top: 0; }        一个人生活 词：鞠起 曲：鞠起</description>
    </item>
    
  </channel>
</rss>
